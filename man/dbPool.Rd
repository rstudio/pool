% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBI.R
\name{dbPool}
\alias{dbPool}
\title{Create a pool of database connections}
\usage{
dbPool(
  drv,
  ...,
  minSize = 1,
  maxSize = Inf,
  idleTimeout = 60,
  validationInterval = 600,
  validateQuery = NULL
)
}
\arguments{
\item{drv}{A \link[DBI:DBIDriver-class]{DBI Driver}, e.g. \code{RSQLite::SQLite()},
\code{RPostgres::Postgres()}, \code{odbc::odbc()} etc.}

\item{...}{Arguments passed on to \code{\link[DBI:dbConnect]{DBI::dbConnect()}}. These are used to
identify the database and provide needed authentication.}

\item{minSize, maxSize}{The minimum and maximum number of objects in the pool.}

\item{idleTimeout}{The number of seconds that an idle
object will be kept in the pool before it is destroyed (only
applies if the number of objects is over the \code{minSize}).
Use \code{Inf} if you want created objects never to be destroyed
(there isn't a great reason for this usually).}

\item{validationInterval}{The minimum number of seconds that
\code{pool} will wait before running a validation check on the
next checked out object. By not necessarily validating every
checked out object, there can be substantial performance gains
(especially if the interval between checking out new objects is
very small).}

\item{validateQuery}{A simple query that can be used to verify that the
connetction is valid. If not provided, \code{dbPool()} will try a few common
options, but these don't work for all databases.}
}
\description{
\code{dbPool()} is a drop-in replacement for \code{\link[DBI:dbConnect]{DBI::dbConnect()}} that
provides a shared pool of connections that can automatically reconnect
to the database if needed.
}
\examples{
# You use a dbPool in the same way as a standard DBI connection
pool <- dbPool(RSQLite::SQLite())
pool

DBI::dbWriteTable(pool, "mtcars", mtcars)
dbGetQuery(pool, "SELECT * FROM mtcars LIMIT 4")

# Using the RMySQL package
if (requireNamespace("RMySQL", quietly = TRUE)) {
  pool <- dbPool(
    drv = RMySQL::MySQL(),
    dbname = "shinydemo",
    host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
    username = "guest",
    password = "guest"
  )

  dbGetQuery(pool, "SELECT * from City LIMIT 5;")

  poolClose(pool)
}
}
