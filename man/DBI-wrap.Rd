% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBI-wrap.R
\name{DBI-wrap}
\alias{DBI-wrap}
\alias{dbDataType,Pool-method}
\alias{dbGetQuery,Pool,ANY-method}
\alias{dbExecute,Pool,ANY-method}
\alias{dbListFields,Pool,ANY-method}
\alias{dbListTables,Pool-method}
\alias{dbListObjects,Pool-method}
\alias{dbReadTable,Pool,ANY-method}
\alias{dbWriteTable,Pool,ANY-method}
\alias{dbCreateTable,Pool-method}
\alias{dbAppendTable,Pool-method}
\alias{dbExistsTable,Pool,ANY-method}
\alias{dbRemoveTable,Pool,ANY-method}
\alias{dbIsReadOnly,Pool-method}
\alias{make.db.names,Pool,ANY-method}
\alias{isSQLKeyword,Pool,ANY-method}
\alias{SQLKeywords,Pool-method}
\alias{sqlData,Pool-method}
\alias{sqlCreateTable,Pool-method}
\alias{sqlAppendTable,Pool-method}
\alias{sqlInterpolate,Pool-method}
\alias{sqlParseVariables,Pool-method}
\alias{dbQuoteIdentifier,Pool,ANY-method}
\alias{dbUnquoteIdentifier,Pool-method}
\alias{dbQuoteLiteral,Pool-method}
\alias{dbQuoteString,Pool,ANY-method}
\title{DBI methods (simple wrappers)}
\usage{
\S4method{dbDataType}{Pool}(dbObj, obj, ...)

\S4method{dbGetQuery}{Pool,ANY}(conn, statement, ...)

\S4method{dbExecute}{Pool,ANY}(conn, statement, ...)

\S4method{dbListFields}{Pool,ANY}(conn, name, ...)

\S4method{dbListTables}{Pool}(conn, ...)

\S4method{dbListObjects}{Pool}(conn, prefix = NULL, ...)

\S4method{dbReadTable}{Pool,ANY}(conn, name, ...)

\S4method{dbWriteTable}{Pool,ANY}(conn, name, value, ...)

\S4method{dbCreateTable}{Pool}(conn, name, fields, ..., row.names = NULL, temporary = FALSE)

\S4method{dbAppendTable}{Pool}(conn, name, value, ..., row.names = NULL)

\S4method{dbExistsTable}{Pool,ANY}(conn, name, ...)

\S4method{dbRemoveTable}{Pool,ANY}(conn, name, ...)

\S4method{dbIsReadOnly}{Pool}(dbObj, ...)

\S4method{make.db.names}{Pool,ANY}(
  dbObj,
  snames,
  keywords = .SQL92Keywords,
  unique = TRUE,
  allow.keywords = TRUE,
  ...
)

\S4method{isSQLKeyword}{Pool,ANY}(
  dbObj,
  name,
  keywords = .SQL92Keywords,
  case = c("lower", "upper", "any")[3],
  ...
)

\S4method{SQLKeywords}{Pool}(dbObj, ...)

\S4method{sqlData}{Pool}(con, value, row.names = NA, ...)

\S4method{sqlCreateTable}{Pool}(con, table, fields, row.names = NA, temporary = FALSE, ...)

\S4method{sqlAppendTable}{Pool}(con, table, values, row.names = NA, ...)

\S4method{sqlInterpolate}{Pool}(conn, sql, ..., .dots = list())

\S4method{sqlParseVariables}{Pool}(conn, sql, ...)

\S4method{dbQuoteIdentifier}{Pool,ANY}(conn, x, ...)

\S4method{dbUnquoteIdentifier}{Pool}(conn, x, ...)

\S4method{dbQuoteLiteral}{Pool}(conn, x, ...)

\S4method{dbQuoteString}{Pool,ANY}(conn, x, ...)
}
\description{
These pool method for DBI generics methods check out a connection
(with \code{\link[=poolCheckout]{poolCheckout()}}), re-call the generic, then return the connection
to the pool (with \code{\link[=poolReturn]{poolReturn()}}).
}
\examples{
mtcars1 <- mtcars[ c(1:16), ] # first half of the mtcars dataset
mtcars2 <- mtcars[-c(1:16), ] # second half of the mtcars dataset

pool <- dbPool(RSQLite::SQLite())

# write the mtcars1 table into the database
dbWriteTable(pool, "mtcars", mtcars1, row.names = TRUE)

# list the current tables in the database
dbListTables(pool)

# read the "mtcars" table from the database (only 16 rows)
dbReadTable(pool, "mtcars")

# append mtcars2 to the "mtcars" table already in the database
dbWriteTable(pool, "mtcars", mtcars2, row.names = TRUE, append = TRUE)

# read the "mtcars" table from the database (all 32 rows)
dbReadTable(pool, "mtcars")

# get the names of the columns in the databases's table
dbListFields(pool, "mtcars")

# use dbExecute to change the "mpg" and "cyl" values of the 1st row
dbExecute(pool,
  paste(
    "UPDATE mtcars",
    "SET mpg = '22.0', cyl = '10'",
    "WHERE row_names = 'Mazda RX4'"
  )
)

# read the 1st row of "mtcars" table to confirm the previous change
dbGetQuery(pool, "SELECT * FROM mtcars WHERE row_names = 'Mazda RX4'")

# drop the "mtcars" table from the database
dbRemoveTable(pool, "mtcars")

# list the current tables in the database
dbListTables(pool)

poolClose(pool)
}
\keyword{internal}
